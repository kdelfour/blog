---
import { getCollection } from "astro:content";

import SubTitle from "../commons/SubTitle.astro";
interface ListBooksProps {
  slice?: number;
}

const { slice } = Astro.props as ListBooksProps;

const allPosts = (await getCollection("books")).sort(
  (a, b) => a.data.pubDate.valueOf() - b.data.pubDate.valueOf()
);

const posts = slice ? allPosts.slice(0, slice) : allPosts;
---

<section class="grid md:grid-cols-3 sm:grid-cols-1 gap-4">
  {
    posts.map((post) => (
      <div class="flex flex-col items-center">
        <a
          href={import.meta.env.BASE_URL + `books/${post.slug}/`}
          class="text-center"
        >
          <div class="relative">
            
            <img
              src={import.meta.env.BASE_URL + post.data.cover}
              alt={`Couverture du livre ${post.data.title}`}
              class="mx-auto h-auto max-w-full rounded-lg"
            />
            {!post.data.isbn && (
              <div class="ribbon">Sorti prévu en {post.data.pubDate}</div>
            )}
          </div>
          <div>
            <SubTitle title={post.data.title} />
            <span class="text-gray-300 text-sm">{post.data.author}</span>
            <p class="text-gray-300 text-sm">
              {!post.data.isbn
                ? `À paraître en ${post.data.pubDate}`
                : `Publié en ${post.data.pubDate}`}
            </p>
          </div>
        </a>
      </div>
    ))
  }
</section>
<style>
  .ribbon {
    font-weight: bold;
    color: #fff;
  }
  .ribbon {
    --d: 0.8em;
    position: absolute;
    top: 20px;
    inset-inline: calc(-1 * var(--d));
    border-bottom: var(--d) solid #0008;
    line-height: 1.8;
    clip-path: polygon(
      0 0,
      100% 0,
      100% calc(100% - var(--d)),
      calc(100% - var(--d)) 100%,
      calc(100% - var(--d)) calc(100% - var(--d)),
      var(--d) calc(100% - var(--d)),
      var(--d) 100%,
      0 calc(100% - var(--d))
    );
    background-color: theme("colors.orange.500");
  }
</style>
